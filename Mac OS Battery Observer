//
//  BatteryOperation.swift
//  whitelabelling
//
//  Created by Nitin Bhatia on 31/07/23.
//

import Foundation
import Cocoa
import IOKit
import IOKit.ps

// Swift doesn't support nested protocol(?!)
protocol BatteryInfoObserverProtocol: AnyObject {
    func batteryInfo(didChange info: BatteryInfo)
}

enum PowerSource: String {
    case AC = "AC Power"
    case Battery = "Battery Power"
}

class BatteryInfo {
    typealias ObserverProtocol = BatteryInfoObserverProtocol
    struct Observation {
        weak var observer: ObserverProtocol?
    }
    
    static let shared = BatteryInfo()
    static var currentPercentage : Int = 0
    private init() {}
    
    private var notificationSource: CFRunLoopSource?
    var observers = [ObjectIdentifier: Observation]()
    
    private func startNotificationSource() {
        if notificationSource != nil {
            stopNotificationSource()
        }
        notificationSource = IOPSNotificationCreateRunLoopSource({ _ in
            BatteryInfo.shared.observers.forEach { (_, value) in
                value.observer?.batteryInfo(didChange: BatteryInfo.shared)
            }
        }, nil).takeRetainedValue() as CFRunLoopSource
        CFRunLoopAddSource(CFRunLoopGetCurrent(), notificationSource, .defaultMode)
    }
    private func stopNotificationSource() {
        guard let loop = notificationSource else { return }
        CFRunLoopRemoveSource(CFRunLoopGetCurrent(), loop, .defaultMode)
    }
    
    func addObserver(_ observer: ObserverProtocol) {
        if observers.count == 0 {
            startNotificationSource()
        }
        observers[ObjectIdentifier(observer)] = Observation(observer: observer)
    }
    func removeObserver(_ observer: ObserverProtocol) {
        observers.removeValue(forKey: ObjectIdentifier(observer))
        if observers.count == 0 {
            stopNotificationSource()
        }
    }
    
    func getBatteryPercentage() -> (percentage: Int, source: PowerSource?) {
        let blob = IOPSCopyPowerSourcesInfo()
        let list = IOPSCopyPowerSourcesList(blob?.takeRetainedValue())
        let PowerDetail = list?.takeRetainedValue()
        
        let allDetails = ((PowerDetail as? [AnyObject])?.first) as? [String:Any]
        
        let source = PowerSource(rawValue: (allDetails?["Power Source State"] as? String)!)
        
        return (percentage:allDetails?["Current Capacity"] as? Int ?? 100, source: source)
        
        
    }
    
    
    
    // Functions for retrieving different properties in the battery description...
}


How to use

 override func viewDidLoad() {
        super.viewDidLoad()
       
        BatteryInfo.shared.addObserver(self)


            
    }

 func batteryInfo(didChange info: BatteryInfo) {
        print(info.getBatteryPercentage())
            print("Changed")
        }
